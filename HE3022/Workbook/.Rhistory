data(rivers)
rivers
sort(rivers)
n < - length(rivers)
n <- length(rivers)
mean(rivers<-300)"n"
mean(rivers<-300)n
mean(rivers<-300)'n
mean(rivers<-300)*n
mean(rivers<300)*n
mean(rivers<300)"n
rplot <- hist(rivers,breaks- "Sturges",freq-T,main-"River Lenghts",xTab-"miles")
rplot <- hist(rivers,breaks- "Sturges",freq-T,main-"River Lenghts",xlab-"miles")
rplot <- hist(rivers,breaks= "Sturges",freq-T,main-"River Lenghts",xlab-"miles")
rplot <- hist(rivers,breaks="Sturges",freq-T,main-"River Lenghts",xlab-"miles")
rplot <- hist(rivers,breaks="Sturges",freq-T,main="River Lengths",xlab="miles")
rplot <- hist(rivers,breaks="Sturges",freq-T,main="River Lengths",xlab="miles")
rplot <- hist(rivers,breaks="Sturges",freq=T,main="River Lengths",xlab="miles")
stemplot <- stem(rivers,scale=2)
stemplot <- stem(rivers,scale-2)
stemplot <- stem(rivers,scale-2)
n <- length(rivers)
stemplot <= stem(rivers,scale-2)
rplot <- hist(rivers,breaks="Sturges", freq-T,main="River Lengths", xlab="miles")
rplot <- hist(rivers, breaks="Sturges", freq-T, main="River Lengths", xlab="miles")
data(titanic)
data(titanic)
data(Titanic)
data(titanic)
data(rivers)
data(titanic)
data(rivers)
data(rivers)
data(Titanic)
x <- c(36,27,24,50,31,23,45,44,43,32,19,34,38,21,16)
y <- c(12,11,10,17,10,12,18,16,14,13,11,12,17,8,7)
lot(x,y,main="Scatter Plot Moisture/Humidity ",xlab="Relative Humidity (%)", ylab="Moisture (%)")
plot(x,y,main="Scatter Plot Moisture/Humidity ",xlab="Relative Humidity (%)", ylab="Moisture (%)")
data(titanic)
data(Titanic)
pie(Titanic(1,1:2,2,2),Radius=1,1)
pie("Titanic"(1,1:2,2,2),Radius=1,1)
library(MASS)
data(SP500)
5+5
plot(SP500)
acf(SP500)
plot(SP500, type="1")
plot(SP500, type='1')
plot(SP500, type = '1')
plot(SP500, type = 'l')
data(SP500)
x<-data(SP500)
x<-data("SP500")
x<-data(SP500)
library(MASS)
x<-data(SP500)
acf(SP500)
setwd("C:/Users/cmok1/Desktop/Course material/Y3S2/HE3022/Workbook")
install.packages("fpp2")
library(fpp2)
tute1 <- read.csv("C:/Users/cmok1/Desktop/Course material/Y3S2/HE3022/Workbook/tute1.csv")
autoplot(melsyd[,"Economy.Class"]) +
ggtitle("Economy class passengers: Melbourne-Sydney") +
xlab("Year") + ylab("Thousands")
head(melsyd)
head(a10)
autoplot(a10) +
ggtitle("Antidiabetic drug sales") +
ylab("$ million") + xlab("Year")
#some seasonality, upward trend
ggseasonplot(a10,year.labels=TRUE,year.labels.left=TRUE) +
ylab("$ million") + ggtitle("Seasonal plot: antidiabetic drug sales")
ggseasonplot(a10, polar=TRUE) + ylab("$ million") + ggtitle("Polar seasonal plot: antidiabetic drug sales")
ggsubseriesplot(a10) + ylab("$ million") +
ggtitle("Seasonal subseries plot: antidiabetic drug sales")
month.breaks <- cumsum(c(0,31,28,31,30,31,30,31,31,30,31,30,31)*4)
autoplot(elecdemand[,c(1,3)],facet=TRUE) +
xlab("Year:2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia") +
scale_x_continuous(breaks=2014+month.breaks/max(month.breaks),
minor_breaks=NULL,labels=c(month.abb,month.abb[1]))
head(elecdemand)
qplot(Temperature,Demand,data=as.data.frame(elecdemand)) + #need assign variable as datafram to plot
ylab("Demand (GW)") + xlab("Temperature (Celsius)")
months.breaks
month.breaks
autoplot(vn,facets=TRUE) +
ylab("Number of visitor nights each quarter")
head(vn)
max(month.breaks)
month.breaks <- cumsum(c(0,31,28,31,30,31,30,31,31,30,31,30,31)*48) #half-hour
autoplot(elecdemand[,c(1,3)],facet=TRUE) + #include facet=TRUE to have 2 different graphs plot according to scale
xlab("Year:2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia") +
scale_x_continuous(breaks=2014+month.breaks/max(month.breaks),
minor_breaks=NULL,labels=c(month.abb,month.abb[1]))
2014+month.breaks
2014+month.breaks/max(month.breaks)
month.breaks <- cumsum(c(0,31,28,31,30,31,30,31,31,30,31,30,31)*48) #half-hour
autoplot(elecdemand[,c(1,3)],facet=TRUE) + #include facet=TRUE to have 2 different graphs plot according to scale
xlab("Year:2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia") +
scale_x_continuous(breaks=2014+month.breaks/max(month.breaks)
library(fpp)
library(fpp)
install.packages("GGally")
autoplot(elecdemand[,c(1,3)],facet=TRUE) + #include facet=TRUE to have 2 different graphs plot according to scale
xlab("Year:2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia") +
scale_x_continuous(breaks=2014+month.breaks/max(mont
#vn %>% as.data.frame() %>% GGally: :ggpairs() #pipe operator, ggpairs, vn is avaialable in fpp package
beer2 <- window(ausbeer, start=1992, end=2006)
#vn %>% as.data.frame() %>% GGally: :ggpairs() #pipe operator, ggpairs, vn is avaialable in fpp package
beer2 <- window(ausbeer, start=1992, end=2006)
help("window")
lag.plot(beer2, lags=9, do.lines=FALSE)
ausbeer
head(ausbeer)
#if perfectly correlated, data points are along dashed line
#see the same correlation in lag4, lag8 - quarterly seasonality
acf(beer2)
#autocorrelation of odd lags is insignificant, significant autocorrelation for even lags
#positive correlation every 4 quarters, some form of seasonality
aelec <- window(elec, start=1980)
autoplot(aelec) + xlab("Year") + ylab("Gwh")
aelec
ggAcf(aelec, lag=40)
#to select model, we look at residual to ensure is white noise - all patterns have been extrated
set.seed(30); x <- ts(rnorm(50)); plot(x,main="White noise")
acf(x)
#Set training data from 1992 - 2007
beer2 <- window(ausbeer,start=1992,end=c(2007,4))
#plot some forecasts
autoplot(beer2) +
forecast::autoplayer(meanf(beer2,h=11)$mean,series="Mean")+
forecast::autoplayer(naive(beer2,h=11)$mean,series="Naive")+
forecast::autoplayer(snaive(beer2,h=11)$mean,series="Seasonal naive")
#plot some forecasts
autoplot(beer2) +
forecast::autolayer(meanf(beer2,h=11)$mean,series="Mean")+
forecast::autolayer(naive(beer2,h=11)$mean,series="Naive")+
forecast::autolayer(snaive(beer2,h=11)$mean,series="Seasonal naive")
#plot some forecasts
autoplot(beer2) + #autolayer allows overlap
forecast::autolayer(meanf(beer2,h=11)$mean,series="Mean")+ #mean
forecast::autolayer(naive(beer2,h=11)$mean,series="Naive")+ #last observation
forecast::autolayer(snaive(beer2,h=11)$mean,series="Seasonal naive")+ #last seasonal series
ggtitle("forecast for quarterly beer production") +
xlab("Year") + ylab("Megalitres") +
guides(colour=guide_legend(title="Forecast"))
# Plot some forecasts
autoplot(dj2) +
forecast::autolayer(meanf(dj2, h=42)$mean, series="Mean") +
forecast::autolayer(rwf(dj2, h=42)$mean, series="NaÃ¯ve") +
forecast::autolayer(rwf(dj2, drift=TRUE, h=42)$mean, series="Drift") +
ggtitle("Dow Jones Index (daily ending 15 Jul 94)") +
xlab("Day") + ylab("") +
guides(colour=guide_legend(title="Forecast"))
#Example 2
# Set training data to first 250 days
dj2 <- window(dj,end=250)
# Plot some forecasts
autoplot(dj2) +
forecast::autolayer(meanf(dj2, h=42)$mean, series="Mean") +
forecast::autolayer(rwf(dj2, h=42)$mean, series="NaÃ¯ve") +
forecast::autolayer(rwf(dj2, drift=TRUE, h=42)$mean, series="Drift") +
ggtitle("Dow Jones Index (daily ending 15 Jul 94)") +
xlab("Day") + ylab("") +
guides(colour=guide_legend(title="Forecast"))
# Plot some forecasts
autoplot(dj2) +
forecast::autolayer(meanf(dj2, h=42), series="Mean") +
forecast::autolayer(rwf(dj2, h=42)$mean, series="NaÃ¯ve") +
forecast::autolayer(rwf(dj2, drift=TRUE, h=42)$mean, series="Drift") +
ggtitle("Dow Jones Index (daily ending 15 Jul 94)") +
xlab("Day") + ylab("") +
guides(colour=guide_legend(title="Forecast"))
# Plot some forecasts
autoplot(dj2) +
forecast::autolayer(meanf(dj2, h=42)$mean, series="Mean") +
forecast::autolayer(rwf(dj2, h=42)$mean, series="NaÃ¯ve") +
forecast::autolayer(rwf(dj2, drift=TRUE, h=42)$mean, series="Drift") +
ggtitle("Dow Jones Index (daily ending 15 Jul 94)") +
xlab("Day") + ylab("") +
guides(colour=guide_legend(title="Forecast"))
