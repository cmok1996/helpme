install.packages("readxl")
install.packages("seasonal")
install.packages("tseries")
install.packages("tfplot")
install.packages("gridExtra")
install.packages("dplyr")
install.packages("car")
library(fpp2)
library(readxl)
library(seasonal)
library(tseries)
library(tfplot)
library(gridExtra)
library(dplyr)
library(car)
#Naming of Data#
FSI_Current <- read.csv("fsi.csv")
FSI<-ts(FSI_Current[,2:6],start=c(1985,1),frequency=12)
FSI1<-window(FSI,start=c(2005,1),end=c(2019,12))
fsi <- FSI1[,"Total"]
#Training Set#
fsitrain<-window(FSI[,1],start=c(2005,1),end=c(2016,12))
fsirest<-window(FSI[,2],start=c(2005,1),end=c(2016,12))
fsiff<-window(FSI[,3],start=c(2005,1),end=c(2016,12))
fsicat<-window(FSI[,4],start=c(2005,1),end=c(2016,12))
fsiothers<-window(FSI[,4],start=c(2005,1),end=c(2016,12))
#Test Set#
fsitest<-window(FSI[,1],start=c(2017,1),end=c(2019,12))
autoplot(FSI1, facets=TRUE) +
ggtitle("Food & Beverage Services Index") +
ylab("Index")
autoplot(FSI1, facets=TRUE) +
ggtitle("Food & Beverage Services Index") +
ylab("Index")
#Training Set#
fsitrain<-window(FSI[,1],start=c(2005,1),end=c(2016,12))
fsirest<-window(FSI[,2],start=c(2005,1),end=c(2016,12))
fsiff<-window(FSI[,3],start=c(2005,1),end=c(2016,12))
fsicat<-window(FSI[,4],start=c(2005,1),end=c(2016,12))
fsiothers<-window(FSI[,4],start=c(2005,1),end=c(2016,12))
#Test Set#
fsitest<-window(FSI[,1],start=c(2017,1),end=c(2019,12))
#Decomposition#
stl<-stl(fsitrain,s.window=13,robust=TRUE)
autoplot(stl)+ylab("Index")+ggtitle("STL Decomposition of FSI (Overall)")
#Lag Plot#
lag.plot(fsitrain,lag=12,do.lines=FALSE)
#Seasonal Plots#
ggseasonplot(fsitrain, year.labels=TRUE, year.labels.left=TRUE) + ylab("Index") + ggtitle("Seasonal plot: FSI (Overall)")
ggsubseriesplot(fsitrain) + ylab("Index") + ggtitle("Subseries plot: FSI (Overall)")
ggsubseriesplot(fsirest) + ylab("Index") + ggtitle("Subseries plot: FSI (Restaurants)")
ggsubseriesplot(fsiff) + ylab("Index") + ggtitle("Subseries plot: FSI (Fast Food)")
ggsubseriesplot(fsicat) + ylab("Index") + ggtitle("Subseries plot: FSI (Catering)")
ggsubseriesplot(fsiothers) + ylab("Index") + ggtitle("Subseries plot: FSI (Others)")
#S-naive#
fit1<-snaive(fsitrain,h=36)
#Simple Exponential Smoothing#
fit2<-ses(fsitrain,h=36)
#HW Additive#
fit3<-hw(fsitrain,h=36,seasonal="additive")
#HW Multiplicative#
fit4<-hw(fsitrain,h=36,seasonal="multiplicative")
#STL-Naive#
fit5<-stlf(fsitrain,h=36,method="naive")
autoplot(fsi)+
forecast::autolayer(fit1$mean,series="Seasonal Naive", PI=FALSE)+
forecast::autolayer(fit2,series="Simple Exponential Smoothing", PI=FALSE)+
forecast::autolayer(fit3,series="Holt-Winters Multiplicative", PI=FALSE)+
forecast::autolayer(fit4,series="Holt-Winters Additive", PI=FALSE)+
forecast::autolayer(fit5,series="STL+Naive", PI=FALSE)+
ggtitle("FSI")+ylab("Index")+guides(colour=guide_legend(title="Forecast Method"))
#Check Accuracy - Table 3.1#
df_checkrmse3<-cbind(c(SNAIVE=accuracy(fit1,fsitest)[1,"RMSE"],
SES=accuracy(fit2,fsitest)[1,"RMSE"],
HW_A=accuracy(fit3,fsitest)[1,"RMSE"],
HW_M=accuracy(fit4,fsitest)[1,"RMSE"],
STLF=accuracy(fit5,fsitest)[1,"RMSE"]),
c(SNAIVE=accuracy(fit1,fsitest)[2,"RMSE"],
SES=accuracy(fit2,fsitest)[2,"RMSE"],
HW_A=accuracy(fit3,fsitest)[2,"RMSE"],
HW_M=accuracy(fit4,fsitest)[2,"RMSE"],
STLF=accuracy(fit5,fsitest)[2,"RMSE"]))
colnames(df_checkrmse3)<-c("Training Set RMSE","Test Set RMSE")
df_checkrmse3
df_checkrmse3<-t(df_checkrmse3)
df_checkrmse3
#ETS#
fit6<-ets(fsitrain)
summary(fit6)
autoplot(fit6)
fc6<-forecast(fit6,h=36)
autoplot(fc6)+ylab("Index")
autoplot(fsi)+forecast::autolayer(fc6,series="ETS", PI=TRUE)+ggtitle("FSI")+ylab("Index")+guides(colour=guide_legend(title="Forecast Method"))
#STL-ETS#
fit7<-stlf(fsitrain, lambda=0, h=36, biasadj=TRUE)
autoplot(fit7)
fc7<-forecast(fit7,h=36)
autoplot(fsi, series="Actual")+forecast::autolayer(fit7,series="STL+ETS", PI=FALSE)+ggtitle("FSI")+ylab("Index")+guides(colour=guide_legend(title="Forecast Method"))
#Check Accuracy - Table 4.1#
df_checkrmse4.1<-cbind(c(ETS=accuracy(fc6,fsitest)[1,"RMSE"],
STL_ETS=accuracy(fc7,fsitest)[1,"RMSE"]),
c(ETS=accuracy(fc6,fsitest)[2,"RMSE"],
STL_ETS=accuracy(fc7,fsitest)[2,"RMSE"]))
df_checkrmse4.1
colnames(df_checkrmse4.1)<-c("Training Set RMSE","Test Set RMSE")
df_checkrmse4.1
#STATIONARITY#
grid.arrange(ggAcf(fsitrain),ggPacf(fsitrain), ncol=2)
adf.test(fsitrain,alternative="stationary")
cbind("Original"=fsitrain,"Seasonal Difference"=diff(fsitrain,12),"First Difference"=diff(fsitrain,1),"Doubly Differenced"=diff(diff(fsitrain,12),1))%>%autoplot(facets=TRUE)
kpss.test(diff(diff(fsitrain,12),1))
#ARIMA#
fit8 <- Arima(fsitrain, order=c(1,1,0), seasonal=c(0,1,1))
fit9 <- Arima(fsitrain, order=c(1,1,1),seasonal=c(0,1,1))
fit10 <- Arima(fsitrain, order=c(2,1,0),seasonal=c(0,1,1))
fit11 <- Arima(fsitrain, order=c(2,1,1),seasonal=c(0,1,1))
fit12 <- Arima(fsitrain, order=c(2,1,0),seasonal=c(0,1,2))
auto.arima(fsitrain,d=1,D=1,stepwise=FALSE,approximation=FALSE)
#Check Accuracy - Table 4.2#
getsamplermse<-function(fsitrain,h=36,...)
{
train<-fsitrain
test<-fsitest
fit<-Arima(train,...)
fc<-forecast(fit,h=h)
return(accuracy(fc,test)[1,"RMSE"])
}
getrmse<-function(fsitrain,h=36,...)
{
train<-fsitrain
test<-fsitest
fit<-Arima(train,...)
fc<-forecast(fit,h=h)
return(accuracy(fc,test)[2,"RMSE"])
}
df_checkrmse4.2<-cbind(
c("ARIMA(1,1,0)(0,1,1)[12]"=fit8$aicc,
"ARIMA(1,1,1)(0,1,1)[12]"=fit9$aicc,
"ARIMA(2,1,0)(0,1,1)[12]"=fit10$aicc,
"ARIMA(2,1,1)(0,1,1)[12]"=fit11$aicc,
"ARIMA(2,1,0)(0,1,2)[12]"=fit12$aicc),
c("ARIMA(1,1,0)(0,1,1)[12]"=getsamplermse(fsitrain,h=36,order=c(1,1,0),seasonal=c(0,1,1)),
"ARIMA(1,1,1)(0,1,1)[12]"=getsamplermse(fsitrain,h=36,order=c(1,1,1),seasonal=c(0,1,1)),
"ARIMA(2,1,0)(0,1,1)[12]"=getsamplermse(fsitrain,h=36,order=c(2,1,0),seasonal=c(0,1,1)),
"ARIMA(2,1,1)(0,1,1)[12]"=getsamplermse(fsitrain,h=36,order=c(2,1,1),seasonal=c(0,1,1)),
"ARIMA(2,1,0)(0,1,2)[12]"=getsamplermse(fsitrain,h=36,order=c(2,1,0),seasonal=c(0,1,2))),
c("ARIMA(1,1,0)(0,1,1)[12]"=getrmse(fsitrain,h=36,order=c(1,1,0),seasonal=c(0,1,1)),
"ARIMA(1,1,1)(0,1,1)[12]"=getrmse(fsitrain,h=36,order=c(1,1,1),seasonal=c(0,1,1)),
"ARIMA(2,1,0)(0,1,1)[12]"=getrmse(fsitrain,h=36,order=c(2,1,0),seasonal=c(0,1,1)),
"ARIMA(2,1,1)(0,1,1)[12]"=getrmse(fsitrain,h=36,order=c(2,1,1),seasonal=c(0,1,1)),
"ARIMA(2,1,0)(0,1,2)[12]"=getrmse(fsitrain,h=36,order=c(2,1,0),seasonal=c(0,1,2))))
colnames(df_checkrmse4.2)<-c("AICc","Training Set RMSE","Test Set RMSE")
df_checkrmse4.2<-t(df_checkrmse4.2)
df_checkrmse4.2
df_checkrmse4.2
5+5
df_checkrmse4.2
df_checkrmse4.2<-t(df_checkrmse4.2)
df_checkrmse4.2
#STL-ARIMA#
grid.arrange(ggAcf(diff(seasadj(stl),1)),ggPacf(diff(seasadj(stl),1)), ncol=2)
fit13<-stlf(fsitrain, method=c("arima"),h=36)
fc13<-forecast(fit13,h=36)
autoplot(fit13)
autoplot(fsi)+forecast::autolayer(fit13,series="STL+ARIMA(2,1,0)", PI=FALSE)+ggtitle("FSI")+ylab("Index")+guides(colour=guide_legend(title="Forecast Method"))
fit14<-stlm(fsitrain,modelfunction=Arima, order=c(0,1,1),  include.constant = TRUE)
fc14<-forecast(fit14,h=36)
autoplot(fc14)
autoplot(fsi)+forecast::autolayer(fc14,series="STL+ARIMA(0,1,1)", PI=FALSE)+ggtitle("FSI")+ylab("Index")+guides(colour=guide_legend(title="Forecast Method"))
df_checkrmse4.3<-cbind(c("STL_ARIMA(2,1,0)"=accuracy(fc13,fsitest)[1,"RMSE"],
"STL_ARIMA(0,1,1)"=accuracy(fc14,fsitest)[1,"RMSE"],
"ARIMA(1,1,0)(0,1,1)[12]"=accuracy(fc10,fsitest)[1,"RMSE"]),
c("STL_ARIMA(2,1,0)"=accuracy(fc13,fsitest)[2,"RMSE"],
"STL_ARIMA(0,1,1)"=accuracy(fc14,fsitest)[2,"RMSE"],
"ARIMA(1,1,0)(0,1,1)[12]"=accuracy(fc10,fsitest)[2,"RMSE"]))
#Selected ARIMA(2,1,0)(0,1,1)[12]#
summary(fit10)
fc10<-forecast(fit10,h=36)
df_checkrmse4.3<-cbind(c("STL_ARIMA(2,1,0)"=accuracy(fc13,fsitest)[1,"RMSE"],
"STL_ARIMA(0,1,1)"=accuracy(fc14,fsitest)[1,"RMSE"],
"ARIMA(1,1,0)(0,1,1)[12]"=accuracy(fc10,fsitest)[1,"RMSE"]),
c("STL_ARIMA(2,1,0)"=accuracy(fc13,fsitest)[2,"RMSE"],
"STL_ARIMA(0,1,1)"=accuracy(fc14,fsitest)[2,"RMSE"],
"ARIMA(1,1,0)(0,1,1)[12]"=accuracy(fc10,fsitest)[2,"RMSE"]))
colnames(df_checkrmse4.3)<-c("Training Set RMSE","Test Set RMSE")
df_checkrmse4.3
df_checkrmse4.3
df_checkrmse4.3<-t(df_checkrmse4.3)
df_checkrmse4.3
df_checkrmse4.3<-cbind(c("STL_ARIMA(2,1,0)"=accuracy(fc13,fsitest)[1,"RMSE"],
"STL_ARIMA(0,1,1)"=accuracy(fc14,fsitest)[1,"RMSE"],
"ARIMA(1,1,0)(0,1,1)[12]"=accuracy(fc10,fsitest)[1,"RMSE"]),
c("STL_ARIMA(2,1,0)"=accuracy(fc13,fsitest)[2,"RMSE"],
"STL_ARIMA(0,1,1)"=accuracy(fc14,fsitest)[2,"RMSE"],
"ARIMA(1,1,0)(0,1,1)[12]"=accuracy(fc10,fsitest)[2,"RMSE"]))
colnames(df_checkrmse4.3)<-c("Training Set RMSE","Test Set RMSE")
df_checkrmse4.3<-t(df_checkrmse4.3)
df_checkrmse4.3
#Check Residuals - STL-ARIMA#
checkresiduals(fc13)
# RSI
rsi_chained <- read.csv("rsi_chained.csv")
rsi_chained <- ts(rsi_chained[,2], c(1985,1), c(2020,2),12)
# tourism
tourism <- read.csv("tourism.csv", header=TRUE)
tourism <- ts(tourism[,2], c(1978,1), c(2020,2), 12)
tourism_scale <- tourism / 10000
# CPI - excluding accomodation
cpi <- read.csv("cpi.csv", header=TRUE)
cpi <- ts(cpi[,2], c(2000,1), c(2020,3),12)
# CPI - excluding accomodation
cpi <- read.csv("cpi.csv", header=TRUE)
cpi <- ts(cpi[,2], c(2000,1), c(2020,3),12)
# ULC - food & accomodation services
ulc <- read.csv("ulc.csv", header=TRUE)
ulc <- ts(ulc[,2], c(1980,1), c(2019,4), 4)
ulc_monthly <- rep(ulc, each=3) %>% ts(c(1980,1), c(2019,12),12)
# IPI - overall
ipi <- read.csv("ipi.csv", header=TRUE)
ipi <- ts(ipi[,2], c(1983,1), c(2020,3),12)
# Dataframe
df <- cbind("fsi" = fsi,
"rsi" = window(rsi_chained, c(2005,1), c(2019,12)),
"tourism" = window(tourism_scale, c(2005,1), c(2019,12)),
"cpi" = window(cpi, c(2005,1), c(2019,12)),
"ipi" = window(ipi, c(2005,1), c(2019,12)),
"ulc" = window(ulc_monthly, c(2005,1), c(2019,12))) %>%
data.frame() %>%
ts(c(2005,1), c(2019,12), 12)
df_train <- window(df, c(2005,1), c(2016,12))
df_test <- window(df, c(2017,1))
# Multiple regression
autoplot(df_train, facets=TRUE) + ylab("Leveled series")
df_train_diff <- diff(df_train,12) %>% diff(1)
df_test_diff <- diff(df_test,1) %>% diff(1)
df_train %>% diff(12) %>% diff(1) %>% as.data.frame %>% ggpairs() #no issue with multicollinearity
autoplot(df_train_diff, facets=TRUE) + ylab("Differenced series")
incl = c(0,1)
i=1
mat = array(dim=c(32,5))
for (a in incl) {
for (b in incl) {
for (c in incl) {
for (d in incl) {
for (e in incl){
mat[i, ] = c(a,b,c,d,e)
i = i + 1
}
}
}
}
}
mat
value_store <- array(dim=c(32,3))
for (i in 2:32) {
x1_model_train <- df_train_diff[,2] * mat[i,1]
x2_model_train <- df_train_diff[,3] * mat[i,2]
x3_model_train <- df_train_diff[,4] * mat[i,3]
x4_model_train <- df_train_diff[,5] * mat[i,4]
x5_model_train <- df_train_diff[,6] * mat[i,5]
fit <- tslm(df_train_diff[,1] ~ x1_model_train + x2_model_train + x3_model_train + x4_model_train + x5_model_train)
checkCV <- CV(fit)
value_store[i,1] <- checkCV["AICc"]
checkCV <- CV(fit)
value_store[i,2] <- checkCV["CV"]
value_store[i,3] <- checkCV["AdjR2"]
}
df_check_multiple <- cbind(mat, value_store) %>% as.data.frame
colnames(df_check_multiple) = c("RSI", "Tourism", "CPI", "IPI", "ULC", "AICc", "CV", "AdjR2")
df_check_multiple %>% arrange(AICc)
fit15 <- tslm(fsi ~ rsi + tourism + cpi + ipi, data=df_train_diff)
summary(fit15)
vif(fit15)
checkresiduals(fit15) #p-value < 0.05, spike at lag=1 and lag=12
# Dynamic regression
incl = c(0,1)
i=1
mat = array(dim=c(32,5))
for (a in incl) {
for (b in incl) {
for (c in incl) {
for (d in incl) {
for (e in incl){
mat[i, ] = c(a,b,c,d,e)
i = i + 1
}
}
}
}
}
mat
value_store <- array(dim=c(32,3))
for (i in 2:32) {
x1_model_train <- df_train[,2] * mat[i,1]
x2_model_train <- df_train[,3] * mat[i,2]
x3_model_train <- df_train[,4] * mat[i,3]
x4_model_train <- df_train[,5] * mat[i,4]
x5_model_train <- df_train[,6] * mat[i,5]
xregg_train <- cbind(x1_model_train, x2_model_train, x3_model_train, x4_model_train, x5_model_train)
xregg_train <- xregg_train[,colSums(xregg_train) != 0]
fit <- auto.arima(df_train[,1], xreg = xregg_train, d=1, D=1)
value_store[i,1] <- fit$aicc
check <- summary(fit)
value_store[i,2] <- check[,2] #Get rmse
value_store[i,3] <- checkresiduals(fit)$p.value #get p.value
}
5+%
df_check_dynamic <- cbind(mat, value_store) %>% as.data.frame
colnames(df_check_dynamic) = c("RSI Chained", "Tourism", "CPI", "IPI", "ULC", "AICc", "RMSE", "p-Value")
df_check_dynamic %>% arrange(AICc)
fit16 <- Arima(df_train[,"fsi"], xreg = cbind("rsi" = df_train[,"rsi"], "tourism" = df_train[,"tourism"], "cpi" = df_train[,"cpi"]),  order = c(0,1,1), seasonal = c(0,1,1))
fit16 <- auto.arima(df_train[,"fsi"], xreg = cbind("rsi" = df_train[,"rsi"], "tourism" = df_train[,"tourism"], "cpi" = df_train[,"cpi"]),  d=1, D=1)
summary(fit16)
# Try specify D=0
value_store <- array(dim=c(32,3))
for (i in 2:32) {
x1_model_train <- df_train[,2] * mat[i,1]
x2_model_train <- df_train[,3] * mat[i,2]
x3_model_train <- df_train[,4] * mat[i,3]
x4_model_train <- df_train[,5] * mat[i,4]
x5_model_train <- df_train[,6] * mat[i,5]
xregg_train <- cbind(x1_model_train, x2_model_train, x3_model_train, x4_model_train, x5_model_train)
xregg_train <- xregg_train[,colSums(xregg_train) != 0]
fit <- auto.arima(df_train[,1], xreg = xregg_train, d=1, D=0)
value_store[i,1] <- fit$aicc
check <- summary(fit)
value_store[i,2] <- check[,2] #Get rmse
value_store[i,3] <- checkresiduals(fit)$p.value #get p.value
}
5+5
5+5
df_check_auto <- cbind(mat, value_store) %>% as.data.frame
colnames(df_check_auto) = c("RSI", "Tourism", "CPI","IPI", "ULC", "AICc", "RMSE", "pVal")
df_check_auto %>% arrange(AICc)
fit_auto <- auto.arima(df_train[,"fsi"], xreg = cbind("rsi" = df_train[,"rsi"], "tourism" = df_train[,"tourism"], "cpi" = df_train[,"cpi"]),  d=1, D=0)
summary(fit_auto)
5+5
checkresiduals(fit_auto)
# Forecast using dynamic regression
fcast_dynamic <- forecast(fit16, h=36, xreg = cbind("rsi" = df_test[,"rsi"], "tourism" = df_test[,"tourism"], "cpi" = df_test[,"cpi"]), bootstrap=TRUE)
fcast_auto <- forecast(fit_auto, h=36, xreg = cbind("rsi" = df_test[,"rsi"], "tourism" = df_test[,"tourism"], "cpi" = df_test[,"cpi"]), bootstrap=TRUE)
df_checkreg <- cbind("Training Set RMSE" = c("ARIMA(0,1,1)(0,1,1)[12] errors" = accuracy(fcast_dynamic, fsitest)["Training set","RMSE"],
"ARIMA(0,1,1)(1,0,1)[12] errors" = accuracy(fcast_auto, fsitest)["Training set", "RMSE"]),
"Test Set RMSE" =c("ARIMA(0,1,1)(0,1,1)[12] errors" = accuracy(fcast_dynamic, fsitest)["Test set","RMSE"],
"ARIMA(0,1,1)(1,0,1)[12] errors" = accuracy(fcast_auto, fsitest)["Test set", "RMSE"]))
df_checkreg
5+5
autoplot(df[,"fsi"], series="Actual") +
forecast::autolayer(fcast_dynamic$mean, series="Fitted") +
xlab("Year") + ylab("Index")
autoplot(df[,"fsi"], series="Actual") +
forecast::autolayer(fcast_dynamic$mean, series="Fitted point forecast") +
forecast::autolayer(fcast_dynamic, series="Fitted prediction intervals") +
xlab("Year") + ylab("Index")
### Section 6 - Selection of best model
combination1_fitted <- (fit1$fitted + fc13$fitted) / 2 #Combination of seasonal-naive & STL-ARIMA forecasts
combination2_fitted <- (fit1$fitted + fcast_dynamic$fitted) / 2 #Combination of seasonal-naive & Dynamic Regression forecasts
combination3_fitted <- (fc13$fitted + fcast_dynamic$fitted)/2 #Combination of STL-ARIMA & Dynamic Regression forecasts
combination4_fitted <- (fc13$fitted + fcast_dynamic$fitted + fit1$fitted)/3 #Combination of seasonal-naive, STL-ARIMA & Dynamic Regression forecasts
combination1_fc <- (fit1[["mean"]] + fc13[["mean"]])/2 #Combination of seasonal-naive & STL-ARIMA forecasts
combination2_fc <- (fit1[["mean"]] + fcast_dynamic[["mean"]])/2 #Combination of seasonal-naive & Dynamic Regression forecasts
combination3_fc <- (fc13[["mean"]] + fcast_dynamic[["mean"]])/2 #Combination of STL-ARIMA & Dynamic Regression forecasts
combination4_fc <- (fc13[["mean"]] + fcast_dynamic[["mean"]] + fit1[["mean"]])/3 #Combination of seasonal-naive, STL-ARIMA & Dynamic Regression forecasts
View(fc13)
df_checkall <- cbind(c("Benchmark" = accuracy(fit1, fsitest)["Training set","RMSE"],
"STL-ARIMA" = accuracy(fc13,fsitest)["Training set","RMSE"],
"Regression" = accuracy(fcast_dynamic, fsitest)["Training set","RMSE"],
"Combination1" = accuracy(combination1_fitted, fsitrain)[1,"RMSE"],
"Combination2" =  accuracy(combination2_fitted, fsitrain)[1,"RMSE"],
"Combination3" =  accuracy(combination3_fitted, fsitrain)[1,"RMSE"],
"Combination4" =  accuracy(combination4_fitted, fsitrain)[1,"RMSE"]),
c("Benchmark" = accuracy(fit1, fsitest)["Test set","RMSE"],
"STL-ARIMA" = accuracy(fc13,fsitest)["Test set","RMSE"],
"Regression" = accuracy(fcast_dynamic, fsitest)["Test set","RMSE"],
"Combination1" = accuracy(combination1_fc, fsitest)["Test set","RMSE"],
"Combination2" = accuracy(combination2_fc, fsitest)["Test set","RMSE"],
"Combination3" = accuracy(combination3_fc, fsitest)["Test set","RMSE"],
"Combination4" = accuracy(combination4_fc, fsitest)["Test set","RMSE"]))
colnames(df_checkall) <- c("Training set RMSE", "Test set RMSE")
df_checkall
stlarima_seasadj_full <- stl(df_full[,1], s.window=13) %>% seasadj() %>% Arima(order=c(2,1,0), include.drift=TRUE)
#Pre-COVID forecast
seasadj_forecast <- forecast(stlarima_seasadj_full, h=12, bootstrap=TRUE)
#Pre-COVID forecast
fsi_full <- FSI[,1] %>% window(c(2005,1), c(2020,2), 12)
stlarima_seasadj_full <- stl(fsi_full, s.window=13) %>% seasadj() %>% Arima(order=c(2,1,0), include.drift=TRUE)
seasonal_stl <- seasonal(stl(fsi_full, s.window=13))
stlarima_full <- stlarima_seasadj_full$fitted + seasonal_stl
seasadj_forecast <- forecast(stlarima_seasadj_full, h=12, bootstrap=TRUE)
seasonal_forecast <- window(seasonal_stl, c(2019,3), c(2020,2)) %>% ts(c(2020,3), c(2021,3), 12)
stlarima_forecast <- cbind("Point Forecast" = seasadj_forecast$mean + seasonal_forecast,
"Lo 80" = seasadj_forecast$lower[,"80%"] + seasonal_forecast,
"Hi 80" = seasadj_forecast$upper[,"80%"] + seasonal_forecast,
"Lo 95" = seasadj_forecast$lower[,"95%"] + seasonal_forecast,
"Hi 95" = seasadj_forecast$upper[,"95%"] + seasonal_forecast)
autoplot(df_full[,"fsi"], series = "Actual") +
forecast::autolayer(stlarima_forecast[,"Point Forecast"], series = "STL-ARIMA forecast") +
ggtitle("Ex-ante 12-months ahead forecast of FSI index using STL-ARIMA model") +
ylab("Index")
#Pre-COVID forecast
fsi_full <- FSI[,1] %>% window(c(2005,1), c(2020,2), 12)
stlarima_seasadj_full <- stl(fsi_full, s.window=13) %>% seasadj() %>% Arima(order=c(2,1,0), include.drift=TRUE)
seasonal_stl <- seasonal(stl(fsi_full, s.window=13))
stlarima_full <- stlarima_seasadj_full$fitted + seasonal_stl
seasadj_forecast <- forecast(stlarima_seasadj_full, h=12, bootstrap=TRUE)
seasonal_forecast <- window(seasonal_stl, c(2019,3), c(2020,2)) %>% ts(c(2020,3), c(2021,3), 12)
stlarima_forecast <- cbind("Point Forecast" = seasadj_forecast$mean + seasonal_forecast,
"Lo 80" = seasadj_forecast$lower[,"80%"] + seasonal_forecast,
"Hi 80" = seasadj_forecast$upper[,"80%"] + seasonal_forecast,
"Lo 95" = seasadj_forecast$lower[,"95%"] + seasonal_forecast,
"Hi 95" = seasadj_forecast$upper[,"95%"] + seasonal_forecast)
autoplot(fsi_full, series = "Actual") +
forecast::autolayer(stlarima_forecast[,"Point Forecast"], series = "STL-ARIMA forecast") +
ggtitle("Ex-ante 12-months ahead forecast of FSI index using STL-ARIMA model") +
ylab("Index")
stlarima_forecast
seasadj_forecast <- forecast(stlarima_seasadj_full, h=12, bootstrap=TRUE)
seasonal_forecast <- window(seasonal_stl, c(2019,3), c(2020,2)) %>% ts(c(2020,3), c(2021,3), 12)
stlarima_forecast <- cbind("Point Forecast" = seasadj_forecast$mean + seasonal_forecast,
"Lo 80" = seasadj_forecast$lower[,"80%"] + seasonal_forecast,
"Hi 80" = seasadj_forecast$upper[,"80%"] + seasonal_forecast,
"Lo 95" = seasadj_forecast$lower[,"95%"] + seasonal_forecast,
"Hi 95" = seasadj_forecast$upper[,"95%"] + seasonal_forecast)
stlarima_forecast
df_full <- cbind("fsi" = FSI[,1] %>% window(c(2005,1), c(2020,2)),
"rsi_chained" = rsi_chained %>% window(c(2005,1), c(2020,2)),
"tourism" = tourism_scale %>% window(c(2005,1), c(2020,2)),
"cpi" = cpi %>% window(c(2005,1), c(2020,2))) %>%
data.frame() %>%
ts(c(2005,1), c(2020,2), 12)
#summary(dynreg_full)
#checkresiduals(dynreg_full)
cbind("Actual" = df_full[,1],
"STL-ARIMA" = stlarima_full,
"Dynamic Regression" = dynreg_full$fitted)  %>% autoplot(facets=TRUE) +
ggtitle("Actual FSI vs fitted models of STL-ARIMA with Drift & Dynamic Regression") +
ylab("Index")
##Forecasting using Dynamic Regression Model
dynreg_full <- Arima(df_full[,1], xreg=cbind("rsi"= df_full[,2], "tourism" = df_full[,3], "cpi" = df_full[,4]), order=c(0,1,1), seasonal=c(0,1,1))
#summary(dynreg_full)
#checkresiduals(dynreg_full)
cbind("Actual" = df_full[,1],
"STL-ARIMA" = stlarima_full,
"Dynamic Regression" = dynreg_full$fitted)  %>% autoplot(facets=TRUE) +
ggtitle("Actual FSI vs fitted models of STL-ARIMA with Drift & Dynamic Regression") +
ylab("Index")
#Look at SARS period
df_past <- cbind("fsi" = FSI[,1] %>% window(c(2000,6), c(2004,12)),
"rsi" = rsi_chained %>% window(c(2000,6), c(2004,12)),
"tourism" = tourism_scale %>% window(c(2000,6), c(2004,12)),
"cpi" = cpi %>% window(c(2000,6), c(2004,12))) %>%
data.frame() %>%
ts(c(2000,6), c(2004,12), 12)
ylab("Parameters")
autoplot(df_past, facets=TRUE) +
autoplot(df_past, facets=TRUE) +
ggtitle("Time Plot from June 2000 to December 2004") +
ylab("Parameters")
autoplot(df_past, facets=TRUE) +
ggtitle("Time Plot from June 2000 to December 2004") +
ylab("Parameters")
#Grim scenario
fcast1_rsi <- stlf(rsi_chained, h=12, method = "naive") #Mar2020 - Feb2021 forecasts
fcast1_cpi <- stlf(cpi,h=11, method = "naive") #Apr2020 - Mar2021 forecasts
tourism_new <- read.csv("tourism_new.csv") #Manually update Mar2021 figures in Microsoft Excel
tourism_new <-ts(tourism_new[,2], c(1978,1), c(2020,3), 12)
tourism_new <- tourism_new / 10000
df_temp1 <- cbind("rsi" = fcast1_rsi$mean[-1:-3],
"tourism" = fcast1_tourism$mean[-1:-2],
"cpi" = fcast1_cpi$mean[-1:-2]) %>% data.frame()
fcast1_tourism <- stlf(tourism_new, h=11, method="naive") #Apr2020 - Mar2021
#We use observed values in March for predictor variables wherever possible. We also set tourism=0 in April to reflect the border shutdown
Mar2020 <- cbind("rsi" = fcast1_rsi$mean[1], "tourism"=tourism_new[length(tourism_new)], "cpi"= cpi[length(cpi)])
Apr2020 <- cbind("rsi" = fcast1_rsi$mean[2], "tourism" = 0, "cpi"= fcast1_cpi$mean[1]) #tourism = 0 due to closure of airports
May2020 <- cbind("rsi" = fcast1_rsi$mean[3], "tourism" = fcast1_tourism$mean[2], "cpi"= fcast1_cpi$mean[2])
grim_xreg <- rbind(Mar2020, Apr2020, May2020, df_temp) %>% ts(c(2020,3), c(2021,2),12)
grim_forecast <- forecast(dynreg_full, xreg = grim_xreg, h=12)
grim_xreg <- rbind(Mar2020, Apr2020, May2020, df_temp) %>% ts(c(2020,3), c(2021,2),12)
df_temp1 <- cbind("rsi" = fcast1_rsi$mean[-1:-3],
"tourism" = fcast1_tourism$mean[-1:-2],
"cpi" = fcast1_cpi$mean[-1:-2]) %>% data.frame()
#We use observed values in March for predictor variables wherever possible. We also set tourism=0 in April to reflect the border shutdown
Mar2020 <- cbind("rsi" = fcast1_rsi$mean[1], "tourism"=tourism_new[length(tourism_new)], "cpi"= cpi[length(cpi)])
Apr2020 <- cbind("rsi" = fcast1_rsi$mean[2], "tourism" = 0, "cpi"= fcast1_cpi$mean[1]) #tourism = 0 due to closure of airports
May2020 <- cbind("rsi" = fcast1_rsi$mean[3], "tourism" = fcast1_tourism$mean[2], "cpi"= fcast1_cpi$mean[2])
#We use observed values in March for predictor variables wherever possible. We also set tourism=0 in April to reflect the border shutdown
#Expect grave economic impact from Mar-May 2020 regardless of scenarios
df_temp1 <- cbind("rsi" = fcast1_rsi$mean[-1:-3], #remove Mar-May forecasts
"tourism" = fcast1_tourism$mean[-1:-2], #Remove Apr-May forecasts
"cpi" = fcast1_cpi$mean[-1:-2]) %>% data.frame() #Remove Apr-May forecasts
Mar2020 <- cbind("rsi" = fcast1_rsi$mean[1], "tourism"=tourism_new[length(tourism_new)], "cpi"= cpi[length(cpi)])
Apr2020 <- cbind("rsi" = fcast1_rsi$mean[2], "tourism" = 0, "cpi"= fcast1_cpi$mean[1]) #tourism = 0 due to closure of airports
May2020 <- cbind("rsi" = fcast1_rsi$mean[3], "tourism" = fcast1_tourism$mean[2], "cpi"= fcast1_cpi$mean[2])
grim_xreg <- rbind(Mar2020, Apr2020, May2020, df_temp) %>% ts(c(2020,3), c(2021,2),12)
grim_xreg <- rbind(Mar2020, Apr2020, May2020, df_temp1) %>% ts(c(2020,3), c(2021,2),12)
grim_forecast <- forecast(dynreg_full, xreg = grim_xreg, h=12)
autoplot(df_full[,1], series = "Actual") +
forecast::autolayer(grim_forecast, series = "Forecast") +
ggtitle("12-months ahead forecast for grim scenario") +
ylab("Index")
grim_forecast
#We append we append the first 3 months of grim forecast to the subsequent 9 months forecasted using STL-ARIMA
good_forecast <- rbind(data.frame("Forecast" = grim_forecast$mean[1:3]), data.frame("Forecast" = stlarima_forecast[4:12])) %>%
ts (c(2020,3), c(2021,2), 12)
good_forecast_PI <- rbind(data.frame(grim_forecast)[1:3,], data.frame(stlarima_forecast)[4:12,]) %>%
ts(c(2020,3), c(2021,2),12)
autoplot(df_full[,1], series = "Actual") +
forecast::autolayer(good_forecast, series = "Forecast") +
ggtitle("12-months ahead forecast for good scenario") +
ylab("Index")
good_forecast_PI
grim_forecast
