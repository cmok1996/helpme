x4_model_train <- df_train[,5] * mat[i,4]
x5_model_train <- df_train[,6] * mat[i,5]
xregg_train <- cbind(x1_model_train, x2_model_train, x3_model_train, x4_model_train, x5_model_train)
xregg_train <- xregg_train[,colSums(xregg_train) != 0]
fit <- auto.arima(df_train[,1], xreg = xregg_train, d=1, D=1)
value_store[i,1] <- fit$aicc
check <- summary(fit)
value_store[i,2] <- check[,2] #Get rmse
value_store[i,3] <- checkresiduals(fit)$p.value #get p.value
x1_model_test <- df_test[,2] * mat[i,1]
x2_model_test <- df_test[,3] * mat[i,2]
x3_model_test <- df_test[,4] * mat[i,3]
x4_model_test <- df_test[,5] * mat[i,4]
x5_model_test <- df_test[,6] * mat[i,5]
xregg_test <- cbind(x1_model_test, x2_model_test, x3_model_test, x4_model_test, x5_model_test)
xregg_test <- xregg_test[,colSums(xregg_test) != 0]
fcast_test <- forecast(fit, h=36, xreg = xregg_test)
check_test <- accuracy(fcast_test, df_test[,1])
value_store[i,4] <- check_test[2,2] #get forecast rmse
}
#Best-fit model
df_full <- cbind("fsi" = FSI[,1] %>% window(c(2005,1), c(2020,2)),
"rsi_chained" = rsi_chained %>% window(c(2005,1), c(2020,2)),
"tourism" = tourism_scale %>% window(c(2005,1), c(2020,2)),
"cpi" = cpi %>% window(c(2005,1), c(2020,2))) %>%
data.frame() %>%
ts(c(2005,1), c(2020,2), 12)
#Best-fit model
df_full <- cbind("fsi" = FSI[,1] %>% window(c(2005,1), c(2020,2)),
"rsi_chained" = rsi_chained %>% window(c(2005,1), c(2020,2)),
"tourism" = tourism_scale %>% window(c(2005,1), c(2020,2)),
"cpi" = cpi %>% window(c(2005,1), c(2020,2))) %>%
data.frame() %>%
ts(c(2005,1), c(2020,2), 12)
fit_full <- auto.arima(df_full[,1], xreg=cbind(df_full[,2], df_full[,3], df_full[,4]), d=1, D=1)
summary(fit_full)
checkresiduals(fit_full)
df_full <- cbind("fsi" = FSI %>% window(c(2005,1), c(2020,2)),
"rsi_chained" = rsi_chained %>% window(c(2005,1), c(2020,2)),
"tourism" = tourism_scale %>% window(c(2005,1), c(2020,2)),
"cpi" = cpi %>% window(c(2005,1), c(2020,2))) %>%
data.frame() %>%
ts(c(2005,1), c(2020,2), 12)
fit_full <- auto.arima(df_full[,1], xreg=cbind(df_full[,2], df_full[,3], df_full[,4]), d=1, D=1)
checkresiduals(fit_full)
checkresiduals(fit_full)
#Best-fit model
df_full <- cbind("fsi" = FSI[,1] %>% window(c(2005,1), c(2020,2)),
"rsi_chained" = rsi_chained %>% window(c(2005,1), c(2020,2)),
"tourism" = tourism_scale %>% window(c(2005,1), c(2020,2)),
"cpi" = cpi %>% window(c(2005,1), c(2020,2))) %>%
data.frame() %>%
ts(c(2005,1), c(2020,2), 12)
fit_full <- auto.arima(df_full[,1], xreg=cbind(df_full[,2], df_full[,3], df_full[,4]), d=1, D=1)
checkresiduals(fit_full)
#Best-fit model
df_full <- cbind("fsi" = FSI[,1] %>% window(c(2005,1), c(2020,2)),
"rsi_chained" = rsi_chained %>% window(c(2005,1), c(2020,2)),
"tourism" = tourism_scale %>% window(c(2005,1), c(2020,2)),
"cpi" = cpi %>% window(c(2005,1), c(2020,2))) %>%
data.frame() %>%
ts(c(2005,1), c(2020,2), 12)
fit_full <- auto.arima(df_full[,1], xreg=cbind(df_full[,2], df_full[,3], df_full[,4]), d=1, D=1)
checkresiduals(fit_full)
df_full <- cbind("fsi" = FSI %>% window(c(2005,1), c(2020,2)),
"rsi_chained" = rsi_chained %>% window(c(2005,1), c(2020,2)),
"tourism" = tourism_scale %>% window(c(2005,1), c(2020,2)),
"cpi" = cpi %>% window(c(2005,1), c(2020,2))) %>%
data.frame() %>%
ts(c(2005,1), c(2020,2), 12)
fit_full <- auto.arima(df_full[,1], xreg=cbind(df_full[,2], df_full[,3], df_full[,4]), d=1, D=1)
checkresiduals(fit_full)
FSI
FSI[,1] %>% window(c(2005,1), c(2020,2)
FSI[,1] %>% window(c(2005,1), c(2020,2))
FSI[,1] %>% window(c(2005,1), c(2020,2))
FSI %>% window(c(2005,1), c(2020,2))
FSI[,1] %>% window(c(2005,1), c(2020,2))
View(fsitrain)
#Best-fit model
df_full <- cbind("fsi" = FSI[,1] %>% window(c(2005,1), c(2020,2)),
"rsi_chained" = rsi_chained %>% window(c(2005,1), c(2020,2)),
"tourism" = tourism_scale %>% window(c(2005,1), c(2020,2)),
"cpi" = cpi %>% window(c(2005,1), c(2020,2))) %>%
data.frame() %>%
ts(c(2005,1), c(2020,2), 12)
fit_full <- auto.arima(df_full[,1], xreg=cbind(df_full[,2], df_full[,3], df_full[,4]), d=1, D=1)
checkresiduals(fit_full)
fit_full <- auto.arima(df_full[,1], xreg=cbind(df_full[,2], df_full[,3], df_full[,4]))
summary(fit_full)
checkresiduals(fit_full)
fit_full <- auto.arima(df_full[,1], xreg=cbind(df_full[,2], df_full[,3], df_full[,4]), stepwise=FALSE, approximation=FALSE)
fit_full <- auto.arima(df_full[,1], xreg=cbind(df_full[,2], df_full[,3], df_full[,4]), stepwise=FALSE, approximation=FALSE)
summary(fit_full)
checkresiduals(fit_full)
fit <- auto.arima(df_train[,1], xreg = xregg_train)
# Discussion
value_store <- array(dim=c(32,4))
for (i in 2:32) {
x1_model_train <- df_train[,2] * mat[i,1]
x2_model_train <- df_train[,3] * mat[i,2]
x3_model_train <- df_train[,4] * mat[i,3]
x4_model_train <- df_train[,5] * mat[i,4]
x5_model_train <- df_train[,6] * mat[i,5]
xregg_train <- cbind(x1_model_train, x2_model_train, x3_model_train, x4_model_train, x5_model_train)
xregg_train <- xregg_train[,colSums(xregg_train) != 0]
fit <- auto.arima(df_train[,1], xreg = xregg_train)
value_store[i,1] <- fit$aicc
check <- summary(fit)
value_store[i,2] <- check[,2] #Get rmse
value_store[i,3] <- checkresiduals(fit)$p.value #get p.value
x1_model_test <- df_test[,2] * mat[i,1]
x2_model_test <- df_test[,3] * mat[i,2]
x3_model_test <- df_test[,4] * mat[i,3]
x4_model_test <- df_test[,5] * mat[i,4]
x5_model_test <- df_test[,6] * mat[i,5]
xregg_test <- cbind(x1_model_test, x2_model_test, x3_model_test, x4_model_test, x5_model_test)
xregg_test <- xregg_test[,colSums(xregg_test) != 0]
fcast_test <- forecast(fit, h=36, xreg = xregg_test)
check_test <- accuracy(fcast_test, df_test[,1])
value_store[i,4] <- check_test[2,2] #get forecast rmse
}
df_check_full <- cbind(mat, value_store) %>% as.data.frame
colnames(df_check_full) = c("RSI Chained", "Tourism", "CPI", "IPI", "ULC", "AICc", "RMSE", "pVal", "RMSE_forecast")
write.csv(df_check_full, "df_check_full.csv")
write.csv(df_check_full, "df_check_full.csv")
df_train <- window(df, c(2005,1), c(2017,12))
df_test <- window(df, c(2018,1))
# Discussion
value_store <- array(dim=c(32,4))
### Dataframe
df <- cbind("fsi" = fsi,
"rsi_chained" = window(rsi_chained, c(2005,1), c(2019,12)),
#"rsi_current" = window(rsi_current, c(2005,1), c(2019,12)),
"tourism" = window(tourism_scale, c(2005,1), c(2019,12)),
"cpi" = window(cpi, c(2005,1), c(2019,12)),
"ipi" = window(ipi, c(2005,1), c(2019,12)),
"ulc" = window(ulc_monthly, c(2005,1), c(2019,12))) %>%
data.frame() %>%
ts(c(2005,1), c(2019,12), 12)
df_train <- window(df, c(2005,1), c(2017,12))
df_test <- window(df, c(2018,1))
value_store <- array(dim=c(32,2))
for (i in 2:32) {
x1_model_train <- df_train[,2] * mat[i,1]
x2_model_train <- df_train[,3] * mat[i,2]
x3_model_train <- df_train[,4] * mat[i,3]
x4_model_train <- df_train[,5] * mat[i,4]
x5_model_train <- df_train[,6] * mat[i,5]
xregg_train <- cbind(x1_model_train, x2_model_train, x3_model_train, x4_model_train, x5_model_train)
xregg_train <- xregg_train[,colSums(xregg_train) != 0]
fit <- auto.arima(df_train[,1], xreg = xregg_train, d=1, D=1)
value_store[i,1] <- fit$aicc
check <- summary(fit)
value_store[i,2] <- check[,2] #Get rmse
}
df_check_dynamic <- cbind(mat, value_store) %>% as.data.frame
colnames(df_check_dynamic) = c("RSI Chained", "Tourism", "CPI", "IPI", "ULC", "AICc", "RMSE")
df_check_dynamic %>% arrange(AICc)  #Model with lowest AICC is model with all variables except ULC & IPI
fit13 <- auto.arima(df_train[,"fsi"], xreg = cbind("rsi" = df_train[,"rsi_chained"], "tourism" = df_train[,"tourism"], "cpi" = df_train[,"cpi"]), d=1, D=1)
checkresiduals(fit13) #p-value = 0.1237
# Discussion
value_store <- array(dim=c(32,4))
for (i in 2:32) {
x1_model_train <- df_train[,2] * mat[i,1]
x2_model_train <- df_train[,3] * mat[i,2]
x3_model_train <- df_train[,4] * mat[i,3]
x4_model_train <- df_train[,5] * mat[i,4]
x5_model_train <- df_train[,6] * mat[i,5]
xregg_train <- cbind(x1_model_train, x2_model_train, x3_model_train, x4_model_train, x5_model_train)
xregg_train <- xregg_train[,colSums(xregg_train) != 0]
fit <- auto.arima(df_train[,1], xreg = xregg_train, d=1, D=1)
value_store[i,1] <- fit$aicc
check <- summary(fit)
value_store[i,2] <- check[,2] #Get rmse
value_store[i,3] <- checkresiduals(fit)$p.value #get p.value
x1_model_test <- df_test[,2] * mat[i,1]
x2_model_test <- df_test[,3] * mat[i,2]
x3_model_test <- df_test[,4] * mat[i,3]
x4_model_test <- df_test[,5] * mat[i,4]
x5_model_test <- df_test[,6] * mat[i,5]
xregg_test <- cbind(x1_model_test, x2_model_test, x3_model_test, x4_model_test, x5_model_test)
xregg_test <- xregg_test[,colSums(xregg_test) != 0]
fcast_test <- forecast(fit, h=36, xreg = xregg_test)
check_test <- accuracy(fcast_test, df_test[,1])
value_store[i,4] <- check_test[2,2] #get forecast rmse
}
df_check_full <- cbind(mat, value_store) %>% as.data.frame
colnames(df_check_full) = c("RSI Chained", "Tourism", "CPI", "IPI", "ULC", "AICc", "RMSE", "pVal", "RMSE_forecast")
write.csv(df_check_full, "df_check_full.csv")
summary(fit13)
# Forecast using dynamic regression
fcast_dynamic <- forecast(fit13, h=24, xreg = cbind("rsi" = df_test[,"rsi_chained"], "tourism" = df_test[,"tourism"], "cpi" = df_test[,"cpi"]), bootstrap=TRUE)
accuracy(fcast_dynamic, df_test[,"fsi"]) #rmse_forecast = 2.627095
autoplot(df[,"fsi"], series="Actual") +
forecast::autolayer(fcast_dynamic$mean, series="Fitted") +
xlab("Year") + ylab("Index")
df_train <- window(df, c(2005,1), c(2015,12))
df_test <- window(df, c(2016,1))
value_store <- array(dim=c(32,2))
for (i in 2:32) {
x1_model_train <- df_train[,2] * mat[i,1]
x2_model_train <- df_train[,3] * mat[i,2]
x3_model_train <- df_train[,4] * mat[i,3]
x4_model_train <- df_train[,5] * mat[i,4]
x5_model_train <- df_train[,6] * mat[i,5]
xregg_train <- cbind(x1_model_train, x2_model_train, x3_model_train, x4_model_train, x5_model_train)
xregg_train <- xregg_train[,colSums(xregg_train) != 0]
fit <- auto.arima(df_train[,1], xreg = xregg_train, d=1, D=1)
value_store[i,1] <- fit$aicc
check <- summary(fit)
value_store[i,2] <- check[,2] #Get rmse
}
df_check_dynamic <- cbind(mat, value_store) %>% as.data.frame
colnames(df_check_dynamic) = c("RSI Chained", "Tourism", "CPI", "IPI", "ULC", "AICc", "RMSE")
df_check_dynamic %>% arrange(AICc)  #Model with lowest AICC is model with all variables except ULC & IPI
fit13 <- auto.arima(df_train[,"fsi"], xreg = cbind("rsi" = df_train[,"rsi_chained"], "tourism" = df_train[,"tourism"], "cpi" = df_train[,"cpi"]), d=1, D=1)
summary(fit13)
checkresiduals(fit13) #p-value = 0.1237
# Forecast using dynamic regression
fcast_dynamic <- forecast(fit13, h=24, xreg = cbind("rsi" = df_test[,"rsi_chained"], "tourism" = df_test[,"tourism"], "cpi" = df_test[,"cpi"]), bootstrap=TRUE)
accuracy(fcast_dynamic, df_test[,"fsi"]) #rmse_forecast = 2.627095
autoplot(df[,"fsi"], series="Actual") +
forecast::autolayer(fcast_dynamic$mean, series="Fitted") +
xlab("Year") + ylab("Index")
# Forecast using dynamic regression
fcast_dynamic <- forecast(fit13, h=36, xreg = cbind("rsi" = df_test[,"rsi_chained"], "tourism" = df_test[,"tourism"], "cpi" = df_test[,"cpi"]), bootstrap=TRUE)
accuracy(fcast_dynamic, df_test[,"fsi"]) #rmse_forecast = 2.627095
for (i in 2:32) {
x1_model_train <- df_train[,2] * mat[i,1]
x2_model_train <- df_train[,3] * mat[i,2]
x3_model_train <- df_train[,4] * mat[i,3]
x4_model_train <- df_train[,5] * mat[i,4]
x5_model_train <- df_train[,6] * mat[i,5]
xregg_train <- cbind(x1_model_train, x2_model_train, x3_model_train, x4_model_train, x5_model_train)
xregg_train <- xregg_train[,colSums(xregg_train) != 0]
fit <- auto.arima(df_train[,1], xreg = xregg_train, d=1, D=1)
value_store[i,1] <- fit$aicc
check <- summary(fit)
value_store[i,2] <- check[,2] #Get rmse
value_store[i,3] <- checkresiduals(fit)$p.value #get p.value
x1_model_test <- df_test[,2] * mat[i,1]
x2_model_test <- df_test[,3] * mat[i,2]
x3_model_test <- df_test[,4] * mat[i,3]
x4_model_test <- df_test[,5] * mat[i,4]
x5_model_test <- df_test[,6] * mat[i,5]
xregg_test <- cbind(x1_model_test, x2_model_test, x3_model_test, x4_model_test, x5_model_test)
xregg_test <- xregg_test[,colSums(xregg_test) != 0]
fcast_test <- forecast(fit, h=36, xreg = xregg_test)
check_test <- accuracy(fcast_test, df_test[,1])
value_store[i,4] <- check_test[2,2] #get forecast rmse
}
# Discussion
value_store <- array(dim=c(32,4))
for (i in 2:32) {
x1_model_train <- df_train[,2] * mat[i,1]
x2_model_train <- df_train[,3] * mat[i,2]
x3_model_train <- df_train[,4] * mat[i,3]
x4_model_train <- df_train[,5] * mat[i,4]
x5_model_train <- df_train[,6] * mat[i,5]
xregg_train <- cbind(x1_model_train, x2_model_train, x3_model_train, x4_model_train, x5_model_train)
xregg_train <- xregg_train[,colSums(xregg_train) != 0]
fit <- auto.arima(df_train[,1], xreg = xregg_train, d=1, D=1)
value_store[i,1] <- fit$aicc
check <- summary(fit)
value_store[i,2] <- check[,2] #Get rmse
value_store[i,3] <- checkresiduals(fit)$p.value #get p.value
x1_model_test <- df_test[,2] * mat[i,1]
x2_model_test <- df_test[,3] * mat[i,2]
x3_model_test <- df_test[,4] * mat[i,3]
x4_model_test <- df_test[,5] * mat[i,4]
x5_model_test <- df_test[,6] * mat[i,5]
xregg_test <- cbind(x1_model_test, x2_model_test, x3_model_test, x4_model_test, x5_model_test)
xregg_test <- xregg_test[,colSums(xregg_test) != 0]
fcast_test <- forecast(fit, h=36, xreg = xregg_test)
check_test <- accuracy(fcast_test, df_test[,1])
value_store[i,4] <- check_test[2,2] #get forecast rmse
}
# Forecast using dynamic regression
fcast_dynamic <- forecast(fit13, h=48, xreg = cbind("rsi" = df_test[,"rsi_chained"], "tourism" = df_test[,"tourism"], "cpi" = df_test[,"cpi"]), bootstrap=TRUE)
accuracy(fcast_dynamic, df_test[,"fsi"]) #rmse_forecast = 2.627095
df_check_full <- cbind(mat, value_store) %>% as.data.frame
colnames(df_check_full) = c("RSI Chained", "Tourism", "CPI", "IPI", "ULC", "AICc", "RMSE", "pVal", "RMSE_forecast")
write.csv(df_check_full, "df_check_full.csv")
df_train <- window(df, c(2005,1), c(2016,12))
df_test <- window(df, c(2017,1))
autoplot(df_train, facets=TRUE) + ylab("Leveled series")
# Discussion
value_store <- array(dim=c(32,4))
for (i in 2:32) {
x1_model_train <- df_train[,2] * mat[i,1]
x2_model_train <- df_train[,3] * mat[i,2]
x3_model_train <- df_train[,4] * mat[i,3]
x4_model_train <- df_train[,5] * mat[i,4]
x5_model_train <- df_train[,6] * mat[i,5]
xregg_train <- cbind(x1_model_train, x2_model_train, x3_model_train, x4_model_train, x5_model_train)
xregg_train <- xregg_train[,colSums(xregg_train) != 0]
fit <- auto.arima(df_train[,1], xreg = xregg_train, d=1, D=1)
value_store[i,1] <- fit$aicc
check <- summary(fit)
value_store[i,2] <- check[,2] #Get rmse
value_store[i,3] <- checkresiduals(fit)$p.value #get p.value
x1_model_test <- df_test[,2] * mat[i,1]
x2_model_test <- df_test[,3] * mat[i,2]
x3_model_test <- df_test[,4] * mat[i,3]
x4_model_test <- df_test[,5] * mat[i,4]
x5_model_test <- df_test[,6] * mat[i,5]
xregg_test <- cbind(x1_model_test, x2_model_test, x3_model_test, x4_model_test, x5_model_test)
xregg_test <- xregg_test[,colSums(xregg_test) != 0]
fcast_test <- forecast(fit, h=48, xreg = xregg_test)
check_test <- accuracy(fcast_test, df_test[,1])
value_store[i,4] <- check_test[2,2] #get forecast rmse
}
df_check_full <- cbind(mat, value_store) %>% as.data.frame
colnames(df_check_full) = c("RSI Chained", "Tourism", "CPI", "IPI", "ULC", "AICc", "RMSE", "pVal", "RMSE_forecast")
write.csv(df_check_full, "df_check_full.csv")
write.csv(df_check_full, "df_check_full.csv")
### Dataframe
df <- cbind("fsi" = fsi,
"rsi_chained" = window(rsi_chained, c(2005,1), c(2019,12)),
#"rsi_current" = window(rsi_current, c(2005,1), c(2019,12)),
"tourism" = window(tourism_scale, c(2005,1), c(2019,12)),
"cpi" = window(cpi, c(2005,1), c(2019,12)),
"cpi_lag" = stats:lag(cpi, -1) %>% window(c(2005,1), c(2019,12)),
"ipi" = window(ipi, c(2005,1), c(2019,12)),
"ulc" = window(ulc_monthly, c(2005,1), c(2019,12))) %>%
data.frame() %>%
ts(c(2005,1), c(2019,12), 12)
### Dataframe
df <- cbind("fsi" = fsi,
"rsi_chained" = window(rsi_chained, c(2005,1), c(2019,12)),
#"rsi_current" = window(rsi_current, c(2005,1), c(2019,12)),
"tourism" = window(tourism_scale, c(2005,1), c(2019,12)),
"cpi" = window(cpi, c(2005,1), c(2019,12)),
"cpi_lag" = stats::lag(cpi, -1) %>% window(c(2005,1), c(2019,12)),
"ipi" = window(ipi, c(2005,1), c(2019,12)),
"ulc" = window(ulc_monthly, c(2005,1), c(2019,12))) %>%
data.frame() %>%
ts(c(2005,1), c(2019,12), 12)
df_train <- window(df, c(2005,1), c(2016,12))
df_test <- window(df, c(2017,1))
mat = array(dim=c(64,6))
mat[i, ] = c(a,b,c,d,e,f)
for (a in incl) {
for (b in incl) {
for (c in incl) {
for (d in incl) {
for (e in incl){
for(f in incl){
mat[i, ] = c(a,b,c,d,e,f)
i = i + 1
}
}
}
}
}
}
mat = array(dim=c(64,6))
for (a in incl) {
for (b in incl) {
for (c in incl) {
for (d in incl) {
for (e in incl){
for(f in incl){
mat[i, ] = c(a,b,c,d,e,f)
i = i + 1
}
}
}
}
}
}
### Dynamic regression
incl = c(0,1)
i=1
mat = array(dim=c(64,6))
for (a in incl) {
for (b in incl) {
for (c in incl) {
for (d in incl) {
for (e in incl){
for(f in incl){
mat[i, ] = c(a,b,c,d,e,f)
i = i + 1
}
}
}
}
}
}
mat
value_store <- array(dim=c(64,2))
value_store <- array(dim=c(64,2))
value_store[i,2] <- check[,2] #Get rmse
for (i in 2:64) {
x1_model_train <- df_train[,2] * mat[i,1]
x2_model_train <- df_train[,3] * mat[i,2]
x3_model_train <- df_train[,4] * mat[i,3]
x4_model_train <- df_train[,5] * mat[i,4]
x5_model_train <- df_train[,6] * mat[i,5]
x6_model_train <- df_train[,6] * mat[i,6]
xregg_train <- cbind(x1_model_train, x2_model_train, x3_model_train, x4_model_train, x5_model_train, x6_model_train)
xregg_train <- xregg_train[,colSums(xregg_train) != 0]
fit <- auto.arima(df_train[,1], xreg = xregg_train, d=1, D=1)
value_store[i,1] <- fit$aicc
check <- summary(fit)
value_store[i,2] <- check[,2] #Get rmse
}
fit13 <- auto.arima(df_train[,"fsi"], xreg = cbind("rsi" = df_train[,"rsi_chained"], "tourism" = df_train[,"tourism"], "cpi" = df_train[,"cpi"]), "cpi_lag" = df_train[,"cpi_lag"] d=1, D=1)
fit13 <- auto.arima(df_train[,"fsi"], xreg = cbind("rsi" = df_train[,"rsi_chained"], "tourism" = df_train[,"tourism"], "cpi" = df_train[,"cpi"], "cpi_lag" = df_train[,"cpi_lag"]), d=1, D=1)
checkresiduals(fit13)
summary(fit13)
fit13 <- auto.arima(df_train[,"fsi"], xreg = cbind("rsi" = df_train[,"rsi_chained"], "tourism" = df_train[,"tourism"], "cpi_lag" = df_train[,"cpi_lag"]), d=1, D=1)
summary(fit13)
checkresiduals(fit13)
for (i in 2:64) {
x1_model_train <- df_train[,2] * mat[i,1]
x2_model_train <- df_train[,3] * mat[i,2]
x3_model_train <- df_train[,4] * mat[i,3]
x4_model_train <- df_train[,5] * mat[i,4]
x5_model_train <- df_train[,6] * mat[i,5]
x6_model_train <- df_train[,7] * mat[i,6]
xregg_train <- cbind(x1_model_train, x2_model_train, x3_model_train, x4_model_train, x5_model_train, x6_model_train)
xregg_train <- xregg_train[,colSums(xregg_train) != 0]
fit <- auto.arima(df_train[,1], xreg = xregg_train, d=1, D=1)
value_store[i,1] <- fit$aicc
check <- summary(fit)
value_store[i,2] <- check[,2] #Get rmse
}
df_check_dynamic <- cbind(mat, value_store) %>% as.data.frame
colnames(df_check_dynamic) = c("RSI Chained", "Tourism", "CPI","CPI_lag", "IPI", "ULC", "AICc", "RMSE")
df_check_dynamic %>% arrange(AICc)  #Model with lowest AICC is model with all variables except ULC & IPI
fit13 <- auto.arima(df_train[,"fsi"], xreg = cbind("rsi" = df_train[,"rsi_chained"], "tourism" = df_train[,"tourism"], "cpi_lag" = df_train[,"cpi_lag"]), d=1, D=1)
summary(fit13)
checkresiduals(fit13) #p-value = 0.1237
fit13 <- auto.arima(df_train[,"fsi"], xreg = cbind("rsi" = df_train[,"rsi_chained"], "tourism" = df_train[,"tourism"], "cpi_lag" = df_train[,"cpi_lag"]))
summary(fit13)
checkresiduals(fit13) #p-value = 0.1237
# Forecast using dynamic regression
fcast_dynamic <- forecast(fit13, h=48, xreg = cbind("rsi" = df_test[,"rsi_chained"], "tourism" = df_test[,"tourism"], "cpi_lag" = df_test[,"cpi_lag"]), bootstrap=TRUE)
accuracy(fcast_dynamic, df_test[,"fsi"]) #rmse_forecast = 2.627095
autoplot(df[,"fsi"], series="Actual") +
forecast::autolayer(fcast_dynamic$mean, series="Fitted") +
xlab("Year") + ylab("Index")
# Forecast using dynamic regression
fcast_dynamic <- forecast(fit13, h=36, xreg = cbind("rsi" = df_test[,"rsi_chained"], "tourism" = df_test[,"tourism"], "cpi_lag" = df_test[,"cpi_lag"]), bootstrap=TRUE)
plots[[l]] <- autoplot(forecast(fit,
xreg = fourier(df_train[,"fsi"], K=l, h=24))) +
xlab(paste("K" = l, " AICc=", round(fit[["aicc"]],2))) +
ylab("")
plots <- list()
for (l in seq(6)) {
fit <- auto.arima(df_train[,"fsi"], xreg = fourier(df_train[,"fsi"], K= l), seasonal = FALSE)
plots[[l]] <- autoplot(forecast(fit, xreg=fourier(df_train[,"fsi"], K=l, h=24))) +
xlab(paste("K=",i," AICC=",round(fit[["aicc"]],2))) + ylab("")
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
plots[[4]],plots[[5]],plots[[6]], nrow=3)
plots[[l]] <- autoplot(forecast(fit, xreg=fourier(df_train[,"fsi"], K=l, h=24))) +
xlab(paste("K=",l," AICC=",round(fit[["aicc"]],2))) + ylab("")
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
plots[[4]],plots[[5]],plots[[6]], nrow=3)
plots <- list()
for (l in seq(6)) {
fit <- auto.arima(df_train[,"fsi"], xreg = fourier(df_train[,"fsi"], K= l), seasonal = FALSE)
plots[[l]] <- autoplot(forecast(fit, xreg=fourier(df_train[,"fsi"], K=l, h=24))) +
xlab(paste("K=",l," AICC=",round(fit[["aicc"]],2))) + ylab("")
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
plots[[4]],plots[[5]],plots[[6]], nrow=3)
length(df_train[,"fsi"])
### Dataframe
df <- cbind("fsi" = fsi,
"rsi_chained" = window(rsi_chained, c(2005,1), c(2019,12)),
#"rsi_current" = window(rsi_current, c(2005,1), c(2019,12)),
"tourism" = window(tourism_scale, c(2005,1), c(2019,12)),
"cpi" = window(cpi, c(2005,1), c(2019,12)),
"cpi_lag" = stats::lag(cpi, -1) %>% window(c(2005,1), c(2019,12)),
"ipi" = window(ipi, c(2005,1), c(2019,12)),
"ulc" = window(ulc_monthly, c(2005,1), c(2019,12))) %>%
data.frame() %>%
ts(c(2005,1), c(2019,12), 12)
df_train <- window(df, c(2005,1), c(2016,12))
df_test <- window(df, c(2017,1))
plots[[l]] <- autoplot(forecast(fit, xreg=fourier(df_train[,"fsi"], K=l, h=24))) +
xlab(paste("K=",l," AICC=",round(fit[["aicc"]],2))) + ylab(paste("pVal=", checkresiduals(fit)$p.value))
plots <- list()
plots <- list()
for (l in seq(6)) {
fit <- auto.arima(df_train[,"fsi"], xreg = fourier(df_train[,"fsi"], K= l), seasonal = FALSE)
plots[[l]] <- autoplot(forecast(fit, xreg=fourier(df_train[,"fsi"], K=l, h=24))) +
xlab(paste("K=",l," AICC=",round(fit[["aicc"]],2))) + ylab(paste("pVal=", checkresiduals(fit)$p.value))
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
plots[[4]],plots[[5]],plots[[6]], nrow=3)
plots[[l]] <- autoplot(forecast(fit, xreg=fourier(df_train[,"fsi"], K=l, h=24))) +
xlab(paste("K=",l," AICC=",round(fit[["aicc"]],2))) + ylab(paste("pVal=", round(checkresiduals(fit)$p.value,2))
}
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
plots[[4]],plots[[5]],plots[[6]], nrow=3)
plots <- list()
for (l in seq(6)) {
for (l in seq(6)) {
gridExtra::grid.arrange(
plots[[1]],plots[[2]],plots[[3]],
plots[[4]],plots[[5]],plots[[6]], nrow=3)
5+5
