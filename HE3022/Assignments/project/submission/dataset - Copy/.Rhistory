install.packages("fpp2")
install.packages("readxl")
install.packages("seasonal")
library(fpp2)
library(readxl)
library(seasonal)
library(tseries)
library(tfplot)
library(gridExtra)
library(dplyr)
library(car)
FSI_Current <- read.csv("fsi.csv")
FSI<-ts(FSI_Current[,2:6],start=c(1985,1),frequency=12)
FSI1<-window(FSI,start=c(2005,1),end=c(2019,12))
fsi <- FSI1[,"Total"]
#Training Set#
fsitrain<-window(FSI[,1],start=c(2005,1),end=c(2016,12))
fsirest<-window(FSI[,2],start=c(2005,1),end=c(2016,12))
fsiff<-window(FSI[,3],start=c(2005,1),end=c(2016,12))
fsicat<-window(FSI[,4],start=c(2005,1),end=c(2016,12))
fsiothers<-window(FSI[,4],start=c(2005,1),end=c(2016,12))
#Test Set#
fsitest<-window(FSI[,1],start=c(2017,1),end=c(2019,12))
# RSI
rsi_chained <- read.csv("rsi_chained.csv")
rsi_chained <- ts(rsi_chained[,2], c(1985,1), c(2020,2),12)
# tourism
tourism <- read.csv("tourism.csv", header=TRUE)
tourism <- ts(tourism[,2], c(1978,1), c(2020,2), 12)
tourism_scale <- tourism / 10000
# CPI - excluding accomodation
cpi <- read.csv("cpi.csv", header=TRUE)
cpi <- ts(cpi[,2], c(2000,1), c(2020,3),12)
# ULC - food & accomodation services
ulc <- read.csv("ulc.csv", header=TRUE)
ulc <- ts(ulc[,2], c(1980,1), c(2019,4), 4)
ulc_monthly <- rep(ulc, each=3) %>% ts(c(1980,1), c(2019,12),12)
# IPI - overall
ipi <- read.csv("ipi.csv", header=TRUE)
ipi <- ts(ipi[,2], c(1983,1), c(2020,3),12)
# Dataframe
df <- cbind("fsi" = fsi,
"rsi" = window(rsi_chained, c(2005,1), c(2019,12)),
"tourism" = window(tourism_scale, c(2005,1), c(2019,12)),
"cpi" = window(cpi, c(2005,1), c(2019,12)),
"ipi" = window(ipi, c(2005,1), c(2019,12)),
"ulc" = window(ulc_monthly, c(2005,1), c(2019,12))) %>%
data.frame() %>%
ts(c(2005,1), c(2019,12), 12)
df_train <- window(df, c(2005,1), c(2016,12))
df_test <- window(df, c(2017,1))
# Multiple regression
autoplot(df_train, facets=TRUE) + ylab("Leveled series")
df_train_diff <- diff(df_train,12) %>% diff(1)
df_test_diff <- diff(df_test,1) %>% diff(1)
autoplot(df_train_diff, facets=TRUE) + ylab("Differenced series")
df_train %>% diff(12) %>% diff(1) %>% as.data.frame %>% ggpairs() #no issue with multicollinearity
df_check_dynamic <- cbind(mat, value_store) %>% as.data.frame
colnames(df_check_dynamic) = c("RSI Chained", "Tourism", "CPI", "IPI", "ULC", "AICc", "RMSE", "p-Value")
df_check_dynamic %>% arrange(AICc)
fit16 <- auto.arima(df_train[,"fsi"], xreg = cbind("rsi" = df_train[,"rsi"], "tourism" = df_train[,"tourism"], "cpi" = df_train[,"cpi"]),  d=1, D=1)
summary(fit16)
checkresiduals(fit16) #p-value = 0.02788
fit16
fcast_dynamic <- forecast(fit16, h=36, xreg = cbind("rsi" = df_test[,"rsi"], "tourism" = df_test[,"tourism"], "cpi" = df_test[,"cpi"]), bootstrap=TRUE)
fcast_auto <- forecast(fit_auto, h=36, xreg = cbind("rsi" = df_test[,"rsi"], "tourism" = df_test[,"tourism"], "cpi" = df_test[,"cpi"]), bootstrap=TRUE)
df_checkreg <- cbind("Training Set RMSE" = c("ARIMA(0,1,1)(0,1,1)[12] errors" = accuracy(fcast_dynamic, fsitest)["Training set","RMSE"],
"ARIMA(0,1,1)(1,0,1)[12] errors" = accuracy(fcast_auto, fsitest)["Training set", "RMSE"]),
"Test Set RMSE" =c("ARIMA(0,1,1)(0,1,1)[12] errors" = accuracy(fcast_dynamic, fsitest)["Test set","RMSE"],
"ARIMA(0,1,1)(1,0,1)[12] errors" = accuracy(fcast_auto, fsitest)["Test set", "RMSE"]))
df_checkreg
fcast_dynamic <- forecast(fit16, h=36, xreg = cbind("rsi" = df_test[,"rsi"], "tourism" = df_test[,"tourism"], "cpi" = df_test[,"cpi"]), bootstrap=TRUE)
fcast1_rsi <- stlf(rsi_chained, h=12, method = "naive") #Mar2020 - Feb2021 forecasts
fcast1_cpi <- stlf(cpi,h=11, method = "naive") #Apr2020 - Mar2021 forecasts
tourism_new <- read.csv("tourism_new.csv") #Manually update Mar2021 figures in Microsoft Excel
tourism_new <-ts(tourism_new[,2], c(1978,1), c(2020,3), 12)
tourism_new <- tourism_new / 10000
tail(tourism_new) #Capture Mar 2020 value
fcast1_tourism <- stlf(tourism_new, h=11, method="naive") #Apr2020 - Mar2021 forecasts
#We use observed values in March for predictor variables wherever possible. We also set tourism=0 in April to reflect the border shutdown
#Expect grave economic impact from Mar-May 2020 regardless of scenarios
df_temp1 <- cbind("rsi" = fcast1_rsi$mean[-1:-3], #remove Mar-May forecasts
"tourism" = fcast1_tourism$mean[-1:-2], #Remove Apr-May forecasts
"cpi" = fcast1_cpi$mean[-1:-2]) %>% data.frame() #Remove Apr-May forecasts
Mar2020 <- cbind("rsi" = fcast1_rsi$mean[1], "tourism"=tourism_new[length(tourism_new)], "cpi"= cpi[length(cpi)])
Apr2020 <- cbind("rsi" = 53, "tourism" = 0, "cpi"= fcast1_cpi$mean[1]) #tourism = 0 due to closure of airports
May2020 <- cbind("rsi" = fcast1_rsi$mean[3], "tourism" = fcast1_tourism$mean[2], "cpi"= fcast1_cpi$mean[2])
grim_xreg <- rbind(Mar2020, Apr2020, May2020, df_temp1) %>% ts(c(2020,3), c(2021,2),12)
grim_forecast <- forecast(dynreg_full, xreg = grim_xreg, h=12)
##Forecasting using Dynamic Regression Model
dynreg_full <- Arima(df_full[,1], xreg=cbind("rsi"= df_full[,2], "tourism" = df_full[,3], "cpi" = df_full[,4]), order=c(0,1,1), seasonal=c(0,1,1))
df_full <- cbind("fsi" = FSI[,1] %>% window(c(2005,1), c(2020,2)),
"rsi_chained" = rsi_chained %>% window(c(2005,1), c(2020,2)),
"tourism" = tourism_scale %>% window(c(2005,1), c(2020,2)),
"cpi" = cpi %>% window(c(2005,1), c(2020,2))) %>%
data.frame() %>%
ts(c(2005,1), c(2020,2), 12)
##Forecasting using Dynamic Regression Model
dynreg_full <- Arima(df_full[,1], xreg=cbind("rsi"= df_full[,2], "tourism" = df_full[,3], "cpi" = df_full[,4]), order=c(0,1,1), seasonal=c(0,1,1))
grim_xreg <- rbind(Mar2020, Apr2020, May2020, df_temp1) %>% ts(c(2020,3), c(2021,2),12)
grim_forecast <- forecast(dynreg_full, xreg = grim_xreg, h=12)
autoplot(df_full[,1], series = "Actual") +
forecast::autolayer(grim_forecast, series = "Forecast") +
ggtitle("12-months ahead forecast for grim scenario") +
ylab("Index")
grim_forecast
Apr2020 <- cbind("rsi" = 53, "tourism" = 0, "cpi"= 99) #tourism = 0 due to closure of airports
grim_xreg <- rbind(Mar2020, Apr2020, May2020, df_temp1) %>% ts(c(2020,3), c(2021,2),12)
grim_forecast <- forecast(dynreg_full, xreg = grim_xreg, h=12)
autoplot(df_full[,1], series = "Actual") +
forecast::autolayer(grim_forecast, series = "Forecast") +
ggtitle("12-months ahead forecast for grim scenario") +
ylab("Index")
grim_forecast
